{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/commonStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailChat.tsx","features/activities/details/ActivityDetailHeader.tsx","features/activities/details/ActivityDetailInfo.tsx","features/activities/details/ActivityDetailSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/form/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/profileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","refreshToken","Profiles","userName","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInital","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","setLoading","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","CommonStore","window","localStorage","getItem","appLoaded","setItem","removeItem","ProfileStore","loadingProfile","uploading","followings","userActivities","loadingFollowings","loadingActivities","activeTab","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","getUser","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","truncate","bio","extra","Icon","str","length","substr","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setloadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","margingBotttom","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","sub","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","ActivityDetailHeader","ActivityDetailInfo","ActivityDetailChat","ActivityDetailSidebar","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","ProfileEditForm","setEditMode","seteditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","setApploaded","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.c9ed0466.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Profile, Photo, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay:number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL= process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n\r\n        if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n        const pagination = response.headers['pagination'];\r\n        if (pagination) {\r\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination))\r\n            return response as AxiosResponse<PaginatedResult<any>>\r\n        }\r\n        return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config, headers} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if(typeof(data) === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('not-found')\r\n            }\r\n            if (data.errors) {\r\n                const modelStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if(data.errors[key]) {\r\n                        modelStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modelStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url:string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url:string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url:string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url:string) => axios.delete<T>(url).then(responseBody),\r\n}\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n            .then(responseBody),\r\n    details: (id:string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity:ActivityFormValues) => requests.post<void>(`/activities`, activity),\r\n    update: (activity:ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id:string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id:string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('account/register', user),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (userName: string) => requests.get<Profile>(`profiles/${userName}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put('/profiles', profile),\r\n    updateFollowing: (userName: string) => requests.post(`/follow/${userName}`, {}),\r\n    listFollowings: (userName: string, predicate: string) => requests.get<Profile[]>(`/follow/${userName}?predicate=${predicate}`),\r\n    listActivities: (userName: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${userName}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUserName: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees?: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description\r\n            this.date = activity.date\r\n            this.city = activity.city\r\n            this.venue = activity.venue\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    userName: string,\r\n    displayName: string,\r\n    image?: string,\r\n    bio?: string,\r\n    followersCount: number,\r\n    followingCount: number,\r\n    following: boolean,\r\n    photos?: Photo[]\r\n\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.userName = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n        \r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string,\r\n    url: string,\r\n    isMain: boolean\r\n}\r\n\r\nexport class ProfileFormValues {\r\n    displayName: string = ''\r\n    bio?: string = ''\r\n\r\n    constructor(profile?: ProfileFormValues | Profile | null) {\r\n        if (profile) {\r\n            this.displayName = profile.displayName;\r\n            this.bio = profile.bio;\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string,\r\n    title: string,\r\n    category: string,\r\n    date: Date\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\"\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\"\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false\r\n    loading = false\r\n    loadingInitial = false\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy')\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity)\r\n            })\r\n            this.setPagination(result.pagination)\r\n            this.setLoadingInital(false)\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInital(false)\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            runInAction(() => {\r\n                this.selectedActivity = activity\r\n            })\r\n            return activity\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity)\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity\r\n                })\r\n                this.setLoadingInital(false)\r\n                return activity\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInital(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(a => a.userName === user.userName);\r\n            activity.isHost = activity.hostUserName === user.userName;\r\n            activity.host = activity.attendees?.find(x => x.userName === activity.hostUserName)\r\n        }\r\n        activity.date = new Date(activity.date!)\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id)\r\n    }\r\n\r\n    setLoadingInital = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    setLoading = (state: boolean) => {\r\n        this.loading = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            this.setLoading(false)\r\n        }\r\n\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            this.setLoading(false)\r\n        }\r\n\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.setLoading(true)\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            this.setLoading(false)\r\n        }\r\n\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.userName !== user?.userName);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (userName: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees?.forEach(attendee => {\r\n                if (attendee.userName === userName) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken(token: string | null) {\r\n        this.token = token;\r\n    }\r\n\r\n    setApploaded() {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    userActivities: UserActivity[] = [];\r\n    loadingFollowings = false;\r\n    loadingActivities = false;\r\n    activeTab = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following'\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.userName;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (userName: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(userName);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false\r\n            }\r\n            )\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false)\r\n\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.uploading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id)\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id)\r\n                }\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n\r\n        }\r\n    }\r\n\r\n    // the following parameter below indicates the status of what we are ABOUT TO change the status to\r\n    updateFollowing = async (userName:string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(userName);\r\n            store.activityStore.updateAttendeeFollowing(userName);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.userName !== store.userStore.user?.userName && this.profile.userName === userName) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n\r\n                if (this.profile && this.profile.userName === store.userStore.user?.userName) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n\r\n                this.followings.forEach(profile => {\r\n                    if (profile.userName === userName) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }    \r\n    }\r\n\r\n    loadFollowings = async (predicate:string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.userName, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingFollowings = false\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (userName: string, predicate?:string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(userName, predicate!)\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false\r\n            })\r\n            \r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this) \r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds)\r\n            store.commonStore.setToken(user.token)\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => { this.user = user })\r\n            history.push('/activities')\r\n            store.modalStore.closeModal();\r\n            console.log(user)\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null)\r\n        window.localStorage.removeItem('jwt')\r\n        this.user = null\r\n        history.push('/')\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token)\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds)\r\n            store.commonStore.setToken(user.token)\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => { this.user = user })\r\n            history.push('/activities')\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (30* 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if(this.user) this.user.displayName = displayName\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore\r\n    commonStore: CommonStore\r\n    userStore: UserStore\r\n    modalStore: ModalStore\r\n    profileStore: ProfileStore\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext)\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean\r\n    body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../common/modals/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        \r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + \"?activityId=\" + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(\"error establishing the connection:\", error));\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments});\r\n            })\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt)\r\n                    this.comments.unshift(comment)});\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore()\r\n    return (\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\" />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || 'assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate }} = useStore()\r\n    return (\r\n        <>\r\n        <Menu vertical size='large' style={{width:'100%', marginTop: 30}}>\r\n            <Header icon='filter' attached color='teal' content='Filters' />\r\n            <Menu.Item \r\n                content=\"All Activities\"\r\n                active={predicate.has('all')}\r\n                onClick={() => setPredicate('all', 'true')}\r\n            />\r\n            <Menu.Item \r\n                content=\"I'm going\"\r\n                active={predicate.has('isGoing')}\r\n                onClick={() => setPredicate('isGoing', 'true')}\r\n            />\r\n            <Menu.Item \r\n                content=\"I'm hosting\"\r\n                active={predicate.has('isHost')}\r\n                onClick={() => setPredicate('isHost', 'true')}\r\n            />\r\n        </Menu>\r\n        <Header />\r\n        <Calendar \r\n            onChange={(date: any) => setPredicate('startDate', date as Date)}\r\n            value={predicate.get('startDate') || new Date()}\r\n        />\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport { SyntheticEvent } from 'react'\r\nimport { Button, Reveal } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore: { updateFollowing, loading }, userStore} = useStore()\r\n    \r\n    function handleFollow(e: SyntheticEvent, userName: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(userName, false) : updateFollowing(userName, true)\r\n    }\r\n\r\n    if (userStore.user?.userName ===profile.userName) return null;\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not Following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid \r\n                    basic \r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.userName)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.userName}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})\r\nfunction truncate(str: string | undefined) {\r\n    if (str) {\r\n        return (str.length > 40) ? str.substr(0, 37)+'...' : str;\r\n    }\r\n}\r\n\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Image, List, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup hoverable key={attendee.userName} trigger={\r\n                    <List.Item key={attendee.userName} as={Link} to={`/profiles/${attendee.userName}`}>\r\n                    <Image \r\n                        size='mini' \r\n                        circular \r\n                        bordered\r\n                        style={attendee.following ? styles : null}\r\n                        src={attendee.image || '/assets/user.png'} />\r\n                </List.Item>\r\n                }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n                \r\n            ))}\r\n        </List>\r\n    )\r\n})\r\n","import { format } from 'date-fns'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            {activity.isCancelled && \r\n                <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\r\n            }\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={ activity.host?.image || '/assets/user.png'}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label color='orange' basic>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>    \r\n                            )}\r\n                            {activity.isGoing &&  !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label color='green' basic>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>    \r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{ format(activity.date!, 'dd MMM yyyy h:mm aa') }\r\n                    <Icon name='marker' />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Fragment } from 'react'\r\nimport { Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActivityListItem from './ActivityListItem'\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore()\r\n    const { groupedActivities } = activityStore\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem activity={activity} key={activity.id} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite'\r\nimport { useEffect, useState } from 'react'\r\nimport { Grid, Loader } from 'semantic-ui-react'\r\nimport { PagingParams } from '../../../app/models/pagination'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActivityFilters from './ActivityFilters'\r\nimport ActivityList from './ActivityList'\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder'\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore\r\n    const [loadingNext, setloadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setloadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setloadingNext(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities()\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n\r\n\r\n        </Grid>\r\n    )\r\n})\r\n","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}> \r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? \r\n                <Label basic color='red'>{meta.error}</Label> : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}\r\n","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore()\r\n    return (\r\n        <Formik \r\n        initialValues={{email: '', password: '', error: null}}\r\n        onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => setErrors({ error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage\r\n                        name=\"error\" render={() => <Label style={{margingBotttom: 10}} basic color='red' content={errors.error}/>} />\r\n                    <Button loading={isSubmitting} positive content=\"Login\" type=\"submit\" fluid/>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    errors: any\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}\r\n","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors'\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore()\r\n    return (\r\n        <Formik \r\n        initialValues={{displayName: '', userName: '', email: '', password: '', error: null}}\r\n        onSubmit={(values, {setErrors}) => userStore.register(values)\r\n            .catch(error => setErrors({ error }))}\r\n        validationSchema = {Yup.object({\r\n            displayName: Yup.string().required(),\r\n            userName: Yup.string().required(),\r\n            email: Yup.string().required().email(),\r\n            password: Yup.string().required(),\r\n        })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\r\n                    <MyTextInput name=\"userName\" placeholder=\"Username\" />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage\r\n                        name=\"error\" render={() => <ValidationErrors errors={errors.error}/>} />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content=\"Register\" type=\"submit\" fluid/>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport LoginForm from '../users/LoginForm'\r\nimport RegisterForm from '../users/RegisterForm'\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore()\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                     <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                     <Button as={Link} to='/activities' size='huge' inverted>Go to Activities!</Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} as={Link} to='/login' size='huge' inverted>Login</Button>\r\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} as={Link} to='/login' size='huge' inverted>Register</Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content=\"loading...\"}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}\r\n","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}> \r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? \r\n                <Label basic color='red'>{meta.error}</Label> : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}\r\n","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label, Select } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}> \r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e,d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? \r\n                <Label basic color='red'>{meta.error}</Label> : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}\r\n","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n]","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react'\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!)\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}> \r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n\r\n            {meta.touched && meta.error ? \r\n                <Label basic color='red'>{meta.error}</Label> : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport { useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router'\r\nimport { Button, Header, Segment } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { Link } from 'react-router-dom'\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput'\r\nimport MyTextArea from '../../../app/common/form/MyTextArea'\r\nimport MySelectInput from '../../../app/common/form/MySelectInput'\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions'\r\nimport MyDateInput from '../../../app/common/form/MyDateInput'\r\nimport { ActivityFormValues } from '../../../app/models/activity'\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>( new ActivityFormValues())\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity desription is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = { ...activity, id: uuid() }\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content=\"loading activity...\" />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content=\"Activity Details\" sub color='teal' />\r\n            <Formik enableReinitialize\r\n                validationSchema={validationSchema}\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa' />\r\n                        <Header content=\"Location Details\" sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={Link} to={'/activities'} floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})\r\n","import { Field, FieldProps, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId)\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) => {\r\n                        commentStore.addComment(values).then(() => { resetForm() })\r\n                    }}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={(e) => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) return;\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`} >\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                        ribbon color='red' content='Cancelled'/>\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <Link to={`/profiles/${activity.host?.userName}`}><strong>{activity.host?.displayName}</strong></Link>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                    <Button color={activity.isCancelled ? 'green' : 'red'} \r\n                        floated='left' basic content={activity.isCancelled ? 'Re-activate activity' : 'Cancel activity'}\r\n                        onClick={cancelActivityToggle} loading={loading}\r\n                        />\r\n                    <Button as={Link} \r\n                        disabled={activity.isCancelled}\r\n                        to={`/manage/${activity.id}`} \r\n                        color='orange' \r\n                        floated='right'>\r\n                        Manage Event\r\n                    </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button \r\n                        disabled={activity.isCancelled} \r\n                        loading={loading} \r\n                        onClick={updateAttendance} \r\n                        color='teal'>\r\n                    Join Activity</Button>\r\n                )}\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\r\n    if(!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item key={attendee.userName} style={{ position: 'relative' }}>\r\n                        {attendee.userName === host?.userName && <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>}\r\n                        <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`/profiles/${attendee.userName}`}>{attendee.displayName}</Link>\r\n                            </Item.Header>\r\n                            {attendee.following && \r\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                            }\r\n                        </Item.Content>\r\n                    </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActivityDetailChat from './ActivityDetailChat'\r\nimport ActivityDetailHeader from './ActivityDetailHeader'\r\nimport ActivityDetailInfo from './ActivityDetailInfo'\r\nimport ActivityDetailSidebar from './ActivityDetailSidebar'\r\n\r\nexport default observer (function ActivityDetails() {\r\n    const {activityStore} = useStore()\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n       \r\n    }, [id, loadActivity, clearSelectedActivity])\r\n\r\n    if (loadingInitial || !activity) return (<LoadingComponent content=''/>);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailHeader activity={activity} />\r\n                <ActivityDetailInfo activity={activity} />\r\n                <ActivityDetailChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailSidebar activity={activity!}/>\r\n            </Grid.Column>\r\n        </Grid>  \r\n    )\r\n})\r\n","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Oops - we've looked everywhere but could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content=\"Stack trace\" color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store'\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})\r\n","import { Form, Formik } from 'formik'\r\nimport React from 'react'\r\nimport { Button, Segment } from 'semantic-ui-react'\r\nimport MyTextArea from '../../../app/common/form/MyTextArea'\r\nimport MyTextInput from '../../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void\r\n}\r\n\r\nexport default function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('The displayName is required'),\r\n    })\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Formik enableReinitialize\r\n                validationSchema={validationSchema}\r\n                initialValues={{\r\n                    displayName: profile?.displayName, bio:\r\n                        profile?.bio\r\n                }}\r\n                onSubmit={values => {updateProfile(values).then(() => setEditMode(false))}}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='displayName' placeholder='Display Name' />\r\n                        <MyTextArea name='bio' placeholder='' rows={3} />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right' positive type='submit' content='Update Profile' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { useState } from 'react'\r\nimport { Tab, Header, Grid, Button } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileEditForm from './form/ProfileEditForm'\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const [editMode, seteditMode] = useState(false)\r\n    const {profileStore: {isCurrentUser, profile}} = useStore()\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`About ${profile!.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => seteditMode(!editMode)} />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                        {editMode ? (\r\n                            <ProfileEditForm setEditMode={seteditMode}/>\r\n                        ) : (\r\n                            <span style={{whiteSpace: 'pre-wrap'}}>{profile!.bio}</span>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n\r\n    )\r\n})\r\n","import { format } from 'date-fns'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react'\r\nimport {  UserActivity } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nconst panes = [\r\n  {\r\n    menuItem: 'Future Events',\r\n    pane: { key: 'future' }\r\n  },\r\n  {\r\n    menuItem: 'Past Events',\r\n    pane: { key: 'past' }\r\n  },\r\n  {\r\n    menuItem: 'Hosting',\r\n    pane: { key: 'hosting' }\r\n  },\r\n]\r\n\r\n\r\nexport default observer(function ProfileActivities() {\r\n  const { profileStore } = useStore();\r\n  const { loadingActivities, loadUserActivities, userActivities, profile } = profileStore\r\n\r\n  useEffect(() => {\r\n    loadUserActivities(profile!.userName)\r\n  }, [loadUserActivities, profile])\r\n\r\n  const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n    loadUserActivities(profile!.userName, panes[data.activeIndex as number].pane.key)\r\n  }\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar'\r\n            content={'Activities'} />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map((activity: UserActivity) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{\r\n                    minHeight: 100, objectFit:\r\n                      'cover'\r\n                  }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header\r\n                    textAlign='center'>{activity.title}</Card.Header>\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileCard from './ProfileCard'\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore()\r\n    const { profile, followings, loadFollowings, loadingFollowings, activeTab} = profileStore\r\n\r\n    useEffect(() => {\r\n        loadFollowings('following');\r\n    }, [loadFollowings])\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={ activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.userName} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Cropper } from 'react-cropper'\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    imagePreview: string,\r\n    setCropper: (cropper: Cropper) => void \r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: '200', width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: '200'\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean,\r\n    uploadPhoto: (file: Blob) => void\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react'\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\r\nimport { Photo } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nexport default observer(function ProfilePhotos() {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto, profile } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] =useState('')\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo)\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)} />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile!.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main'+photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main'+photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e) }\r\n                                            />\r\n                                            <Button \r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e) }\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileActivities from './profileActivities'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfilePhotos from './ProfilePhotos'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const { profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <Tab.Pane><ProfileAbout /></Tab.Pane>},\r\n        {menuItem: 'Photos', render: () => <Tab.Pane><ProfilePhotos /></Tab.Pane>},\r\n        {menuItem: 'Events', render: () => <Tab.Pane><ProfileActivities /></Tab.Pane>},\r\n        {menuItem: 'Followers', render: () => <Tab.Pane><ProfileFollowings /></Tab.Pane>},\r\n        {menuItem: 'Following', render: () => <Tab.Pane><ProfileFollowings /></Tab.Pane>},\r\n    ]\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex) }\r\n        />\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group width={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider/>\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {userName} = useParams<{userName: string}>();\r\n    const {profileStore} = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(userName);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, userName, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile....' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n            {profile && \r\n            <>\r\n            <ProfileHeader profile={profile}/>\r\n            <ProfileContent profile={profile}/>\r\n            </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router';\r\nimport { useStore } from '../stores/store'\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const { userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}\r\n","import { Fragment, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport { Switch } from 'react-router-dom';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setApploaded())\n    } else {\n      commonStore.setApploaded()\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer/>\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute path={['/createActivity', '/manage/:id']} component={ActivityForm} key={location.key} />\n                <PrivateRoute path='/profiles/:userName' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}